##======================================================================
##
##  FILE:  Makefile to compile subset of Steve Kargs' open source
##     BACnet stack source files, into object files, and then into
##     a shared object file to install as a library . . .
##
##
##  COMPILE PROJECT WITH:
##
##     $ make -f makefile--for-kargs-bacnet-mstp
##
##
##  REFERENCES:
##
##   From Robert Mecklenburg's GNU Make book page 33, complicated rule
##   to have `make` figure and generate project dependencies:
##
##      include $(subst .c,.d,$(SOURCES))
##
##      %.d: %.c
##      	$(CC) -M $(CPPFLAGS) $< > $@.$$$$; \
##      	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
##      	rm -f $@.$$$$
##
##
##  DEVELOPMENT OF THIS MAKEFILE . . .
##
##    - 2017-03-31 - Errors during the build of the kargs stack shared
##    object library give clues as to which source files need to be
##    expressed as shared object dependencies.  These sources appear in
##    this makefile in the object filename lists assigned to $(OBJECT_)
##    variables.  A project makefile rule converts these .o type
##    filenames to the .c filenames we find in the directory of this
##    project on a local or remotely mounted file system.
##
##    Sometimes make variable vpath must be amended, when source files
##    are located in a new-to-this-project path.
##
##    To verify the library works, a test program is compiled and run,
##    until it runs without errors.  In summary the adding of more
##    Kargs' stack routine calls in the test program, and getting this
##    to work as desired, can be summed up in these steps:
##
##
##      *  compile Kargs' shared object library, which this makefile describes,
##
##      *  install this makefile's shared object "final goal" file,
##
##      *  compile BACnet stub / test program until no errors no warnings appear,
##
##      *  run test program until no run-time errors occur,
##
##
##    Be sure $(LD_LIBRARY_PATH) set to include path to shared object
##    library!  - TMH
##
##
##
##======================================================================



export PROJECT_NAME=kargs-bacnet-mstp-routines

export LIBRARY_BASENAME=libkargs-bacnet-mstp

export LIBRARY_NAME=$(LIBRARY_BASENAME)-$(MAJOR)p$(MINOR_1)p$(MINOR_2)



export KARGS_BACNET_RELEASE__MAJOR=0
export KARGS_BACNET_RELEASE__MINOR_1=8
export KARGS_BACNET_RELEASE__MINOR_2=3

export MAJOR=$(KARGS_BACNET_RELEASE__MAJOR)

export MINOR_1=$(KARGS_BACNET_RELEASE__MINOR_1)

export MINOR_2=$(KARGS_BACNET_RELEASE__MINOR_2)






# LOCAL_KARGS_RELEASE_DIR=/home/ted/projects/bacnet/steve-karg-stack/tags/bacnet-stack-0.8.3
LOCAL_KARGS_RELEASE_DIR=/home/ted/projects/bacnet/steve-karg-stack/tags/bacnet-stack-0.8.3--verbose


CFLAGS=-I$(LOCAL_KARGS_RELEASE_DIR)/include -I$(LOCAL_KARGS_RELEASE_DIR)/test -I../include \
-I/usr/local/include/libtestlib-0p1

#
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## 2017-03-31 NOTE:  Due to double-quoted header file includes in
##   Kargs' project Ted needed to go and make the following symbolic
##   links:
##
##
##   *  .../bacnet-stack-0.8.3--verbose/ports/linux/bacdef.h -> ../../include/bacdef.h
##
##   *  .../bacnet-stack-0.8.3--verbose/ports/linux/timer.h -> ../../include/timer.h   <-- THIS SYMLINK REMOVED, AND timer.h PUT BACK THIS PATH - TMH
##
##
##
##   *  .../bacnet-stack-0.8.3--verbose/demo/handler/bacenum.h -> ../../include/bacenum.h
##
##   *  .../bacnet-stack-0.8.3--verbose/demo/handler/config.h -> ../../include/config.h
##
##   *  .../bacnet-stack-0.8.3--verbose/demo/handler/datalink.h -> ../../include/device.h
##
##   *  .../bacnet-stack-0.8.3--verbose/demo/handler/device.h -> ../object/device.h
##
##   *  .../bacnet-stack-0.8.3--verbose/demo/handler/txbuf.h -> ../../include/txbuf.h
##
##
##
##   *  .../bacnet-stack-0.8.3--verbose/demo/object/bacdef.h -> ../../include/bacdef.h
##
##   *  .../bacnet-stack-0.8.3--verbose/demo/object/bacenum.h -> ../../include/bacenum.h
##
##   *  .../bacnet-stack-0.8.3--verbose/demo/object/net.h -> ../../ports/linux/net.h
##
##   *  .../bacnet-stack-0.8.3--verbose/demo/object/timer.h -> ../../include/timer.h
##
##
##
##   *  .../bacnet-stack-0.8.3--verbose/demo/readprop/device.h -> ../object/device.h
##
##
##
##   *  .../bacnet-stack-0.8.3--verbose/include/net.h -> ../ports/linux/net.h
##
##
##
##
##  There may be a few other symlinks Ted missed noting here, for not
##  noting them at when first ones needed.  A review of Steve Kargs'
##  release 0.8.3 to check for symlinks within his file and directory
##  layout will likely show no symbolic links there.  Ted wants to find
##  more manageable and elegant way to build a shared library of a
##  subset of Kargs' open source BACnet work.  Manually noting symlinks
##  and needing to create them by hand, by trial-and-error is tedious
##  and not a good factoring or structuring of reusable code . . .  - TMH
##
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#



SRC_DIR=$(LOCAL_KARGS_RELEASE_DIR)/src


## Tell `make` to search these directories for prerequisite source files:

# VPATH=$(SRC_DIR)
vpath %.c \
$(LOCAL_KARGS_RELEASE_DIR)/src \
$(LOCAL_KARGS_RELEASE_DIR)/ports/linux \
$(LOCAL_KARGS_RELEASE_DIR)/test \
$(LOCAL_KARGS_RELEASE_DIR)/demo/handler \
$(LOCAL_KARGS_RELEASE_DIR)/demo/object \
$(LOCAL_KARGS_RELEASE_DIR)/demo/readprop


## Tell `make` to search these directories for prerequisite headers:

vpath %.h \
$(LOCAL_KARGS_RELEASE_DIR)/include \
$(LOCAL_KARGS_RELEASE_DIR)/ports/linux \
$(LOCAL_KARGS_RELEASE_DIR)/test



## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## 2017-02-28 - what does rs485.c provide?  This source file pound
##  includes a double-quoted header file, which is causing problems with
##  our shared object library build . . .    - TMH
##
##  Ok this shared object mini-project builds with or without the Kargs
##  source file named rs485.c, but our test program named bacnet-stub.c
##  does not compile and the gcc errors are that the shared object
##  has undefined references to three Kargs BACnet stack routines . . .
##
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# OBJECT_FILES_TO_CREATE=ctest.o ringbuf.o crc.o mstp.o mstptext.o timer.o indtext.o


## - 2017-03-07 TUE - To document where sources come from in 0.8.3 Kargs' stack release:

# OBJECT_FILES_FROM_SRC=crc.o indtext.o mstp.o mstptext.o ringbuf.o

OBJECT_FILES_FROM_SRC=abort.o address.o apdu.o bacaddr.o bacapp.o bacdcode.o bacdevobjpropref.o bacerror.o bacint.o bacreal.o bacstr.o bactext.o bip.o bvlc.o crc.o datetime.o dcc.o debug.o fifo.o filename.o iam.o indtext.o mstp.o mstptext.o npdu.o reject.o ringbuf.o rp.o tsm.o version.o whois.o
OBJECT_FILES_FROM_PORTS_LINUX=bip-init.o dlmstp.o rs485.o timer.o
OBJECT_FILES_FROM_TEST=ctest.o
# OBJECT_FILES_FROM_MAKEFILE_DIR=extras.o
OBJECT_FILES_FROM_DEMO_HANDLER=dlenv.o h_iam.o h_npdu.o h_rp.o h_rp_a.o h_whois.o noserv.o s_iam.o s_rp.o s_whois.o txbuf.o
OBJECT_FILES_FROM_DEMO_OBJECT=device-client.o
OBJECT_FILES_FROM_DEMO_READPROP=main.o

OBJECT_FILES_TO_CREATE=\
$(OBJECT_FILES_FROM_SRC) \
$(OBJECT_FILES_FROM_PORTS_LINUX) \
$(OBJECT_FILES_FROM_TEST) \
$(OBJECT_FILES_FROM_MAKEFILE_DIR) \
$(OBJECT_FILES_FROM_DEMO_HANDLER) \
$(OBJECT_FILES_FROM_DEMO_OBJECT) \
$(OBJECT_FILES_FROM_DEMO_READPROP)


SOURCES=$(subst .o,.c,$(OBJECT_FILES_TO_CREATE)) 

SHARED_OBJECT_FILE=$(LIBRARY_NAME).so

# HEADERS=externally-defined-kargs-functions.h
# HEADERS=standard-c-headers.h


## Notes on -D flags . . .
##
##  -DTEST . . . to enable several routines near end of source mstp.c,
##
##  -DPRINT_ENABLED . . . ( Ted needs to track this one down, was added by Ted 2017-03-07 )
##
##  -DDEBUG_ENABLED . . . for more verbose debug_printf() in ~[Kargs_release]/src/debug.c
##
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# DASH_D_FLAGS=-DTEST -DPRINT_ENABLED -DDEBUG_ENABLED
# DASH_D_FLAGS=-DPRINT_ENABLED -DDEBUG_ENABLED

# 2017-04-06:
# DASH_D_FLAGS=-DPRINT_ENABLED -DDEBUG_ENABLED -DBACDL_MSTP -DBBMD_ENABLED

# 2017-04-13:
# DASH_D_FLAGS=-DPRINT_ENABLED -DDEBUG_ENABLED -DBACDL_MSTP=1 -DBBMD_ENABLED

# 2017-04-20:
DASH_D_FLAGS=-DPRINT_ENABLED -DDEBUG_ENABLED -DBACDL_MSTP=1 -DBBMD_ENABLED $(DASH_D_DIAGNOSTICS_BY_TED)
#DASH_D_DIAGNOSTICS_BY_TED = -DDIAGNOSTICS__NPDU_HANDLER=DIAGNOSTICS_OFF

# 2017-05-08:
DASH_D_DIAGNOSTICS_BY_TED = \
-DDIAGNOSTICS__NPDU_HANDLER=0 \
-DDIAGNOSTICS__APDU_HANDLER=DIAGNOSTICS_OFF \
-DDIAGNOSTICS__DLMSTP_RECEIVE=DIAGNOSTICS_OFF \
-DDIAGNOSTICS__TSM_INVOKE_ID_FREE=DIAGNOSTICS_OFF \
-DDIAGNOSTICS__TSM_INVOKE_ID_FAILED=DIAGNOSTICS_OFF \
-DDIAGNOSTICS__ADDRESS_BIND_REQUEST=DIAGNOSTICS_OFF \
-DDIAGNOSTICS__SEND_READ_PROPERTY_REQUEST=DIAGNOSTICS_OFF \
-DDIAGNOSTICS__SEND_READ_PROPERTY_REQUEST_ADDRESS=DIAGNOSTICS_ON



TARGETS=$(SHARED_OBJECT_FILE)




all: $(TARGETS)




# Update the targets whenever any of the object files which comprise
# the shared object library file are newer than the shared object file.
# This is the rule which invokes gcc to create a .so shared object
# file:

$(TARGETS): $(OBJECT_FILES_TO_CREATE)
	$(CC) -shared -o $@ $(OBJECT_FILES_TO_CREATE)



.PHONY: show-sources
show-sources:
	@printf "#\n# sources for shared object based on Kargs' stack are:\n#  $(SOURCES)\n#\n"

.PHONY: show-summary
show-summary:
	@printf "#\n# For shared object library, list of files needed:\n"
	@printf "# Sources:  $(SOURCES)\n"
	@printf "# Headers:  $(HEADERS)\n"
	@printf "# Object files:  $(OBJECT_FILES_TO_CREATE)\n"
	@printf "# Dependency files:  $(dependency_files)\n"
	@printf "#\n"




#%.o: %.c
# 2017-03-02 - Ted adding preprocessor macro statement '-DTEST', to enamble compiling lines 1235 to 1712 in mstp.c:
#	$(CC) -o $@ -c -fPIC $<
#	echo "* * *  variable vpath holds '" $(vpath) "',  * * *"     # <-- $(vpath) evaluates to the empty string in this statement - TMH
#	$(CC) -DTEST -o $@ -c -fPIC $<
#	$(CC) $(CFLAGS) -DTEST -c -fPIC $< -o $@

#	$(CC) $(CFLAGS) -DTEST -DPRINT_ENABLED -c -fPIC $< -o $@

%.o: %.c
# 	$(CC) $(CFLAGS) $(DASH_D_FLAGS) -c -fPIC -lpthread $< -o $@
	$(CC) $(CFLAGS) $(DASH_D_FLAGS) -c -fPIC $< -o $@





## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##  - 2017-02-28 TUE -
##  So far a while the only way to point make to source files in a
##  directory other than . was to spell out the following, file-specific
##  rules for building each source into an object file which make's
##  call to gcc would place here along side thise makefile.  Then
##  unexpectly yesterday, Monday Feb 27, adding .o filenames to the
##  list of object files to create *just worked*.  Ted asks, what allowed
##  this to work for the new files?  These *.o filenames are converted
##  here in this makefile to their corresponding .c source filenames.
##
##  Also Ted notes that 
##
##

#.PHONY: crc.o
#crc.o: $(SRC_DIR)/crc.c
#	$(CC) -o $@ -c -fPIC $<
#
#.PHONY: mstp.o
#mstp.o: $(SRC_DIR)/mstp.c
#	$(CC) -o $@ -c -fPIC $<
#
#.PHONY: mstptext.o
#mstptext.o: $(SRC_DIR)/mstptext.c
#	$(CC) -o $@ -c -fPIC $<







#
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## 2017-02-16 THU - A test, using makefile code from Robert Mecklenburg's GNU
##  make book page 77:
## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#

letters := $(foreach letter,a b c d,$(letter))
show-words:
	# letters has $(words $(letters)) words: '$(letters)'




dependency_files := $(subst .c,.d,$(SOURCES))

include $(subst .c,.d,$(SOURCES))

%.d: %.c
	$(CC) -M $(CPPFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$





install:
#	@echo "install target not yet implemented for project '$(LIBRARY_NAME)',"
	@echo "installing '$(LIBRARY_NAME)' in local test library location . . ."
	sudo cp -p $(TARGETS) /usr/local/lib/libtestlib-0p1



clean:
	rm -f ./*.d ./*.o ./*.so



# --- EOF ---
